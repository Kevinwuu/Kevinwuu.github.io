<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git merge, rebase與squash合併差別</title>
    <url>/git-merge-rebase-squash-difference/</url>
    <content><![CDATA[<span id="more"></span>

<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/image.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在github或gitlab合併時常常會看到以下這幾種選項</p>
<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/github.png"></p>
<p>很多時候只有被同事告知選哪個就好，一開始也不太有空了解其中差別<br>但隨著往後可能會進入不同公司的不同開發團隊，有可能會因此需要適應不同的方案跟開發習慣<br>因此還是決定自己實際下過指令看看，這樣之後才會更知道哪種選項更適合當時的情境~</p>
<!--more-->

<h3 id="檔案原始狀態"><a href="#檔案原始狀態" class="headerlink" title="檔案原始狀態:"></a>檔案原始狀態:</h3><p>主分支main有3筆commit: 1,2,3</p>
<p>開發分支dev有兩筆commit: 4,5</p>
<p>模擬實際開發情形，目標希望將dev開發完的新功能合併回main中。</p>
<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/image1.png"></p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge:"></a>merge:</h3><p>從目標branch拉出一條線到目前分支上，並且多長出一個commit紀錄合併內容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要在main上操作</span></span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/image2.png"></p>
<p>在main上把dev merge進來</p>
<h3 id="squash"><a href="#squash" class="headerlink" title="squash:"></a>squash:</h3><p>目標brach不會拉出合併的線，目前分支會多出一筆commit叫squash</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要在main上操作</span></span><br><span class="line">git merge --squash dev</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/image3.png"></p>
<p>在main上merge dev</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase:"></a>rebase:</h3><p>會把目標branch的所有commit接到base上</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要在dev上操作</span></span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Git-merge-rebase%E8%88%87squash%E5%90%88%E4%BD%B5%E5%B7%AE%E5%88%A5/image4.png"></p>
<p>在dev上將main重新設為基準點把自己的commit接上去</p>
<h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p><a href="https://www.team-bob.org/git-merge-squash-rebase/">[Git 筆記] merge、squash、rebase 三種方式的比較</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github page 搭配 Google domain 自訂網域</title>
    <url>/google-domain-tutorial/</url>
    <content><![CDATA[<p><img src="/google-domain-tutorial/cover.png" alt="cover"></p>
<p>本來以為只要買完網域設定後，在github repo設定就ok了<br>但殊不知在買網域的過程中和買完網域後都有踩了一些沒想過的問題，所以就順手紀錄當作備忘錄<br>一開始看了一些教學文發現有些資訊已經跟現在有點不太一樣，所以打算自己重寫一篇，不過後來又看到一篇不錯的文章於是作罷改為整理資訊與步驟的形式<br>推<a href="https://kulan.dev/b200603/">完整教學文</a></p>
<span id="more"></span>

<h2 id="為何選擇Google-Domain"><a href="#為何選擇Google-Domain" class="headerlink" title="為何選擇Google Domain"></a>為何選擇Google Domain</h2><p>如果上網搜尋買網域平台，最有名的大概是<a href="https://tw.godaddy.com/">GoDaddy</a>，只不過價錢就比較貴一些<br>另外比較可靠的選擇還有<a href="https://www.namecheap.com/">Namecheap</a>，價格便宜之外也有提供免費WhoIS Guard隱私保護</p>
<p>但! 最終改變心意的一點是朋友在當時剛好買了<a href="https://domains.google/">Google domain</a>，而且他們有提供信箱轉址的服務!<br>可以直接在Google domain中設定像是<code>&lt;custom_name&gt;@chienwu.dev</code>的自訂信箱，以及別人寄到這信箱時要轉送的真正信箱。<br>這樣對外就可以使用一個看起來更簡潔專業的信箱了! (小時候設定的gmail名稱真的是包含太多個人資訊又很蠢xD)</p>
<h2 id="設定步驟"><a href="#設定步驟" class="headerlink" title="設定步驟"></a>設定步驟</h2><ol>
<li>購買Google domain網域</li>
<li>Github page repo &gt; setting &gt; custom domain</li>
<li>Google Domains 設定 DNS</li>
<li>回Github page檢查DNS審核狀態，開啟HTTPS</li>
</ol>
<h2 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h2><ul>
<li>Google Domains 目前仍不支援您所在的國家/地區</li>
<li>Github page DNS check failed</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>聯絡資訊的國家可以選擇台灣，不需造假填美國地址資料，也不必委屈被當成中國一省，那麼就照實填寫吧，將來網域若引起糾紛留下的資料必須能讓 Google 聯繫上，且 Google Domains 提供隱私保護，這些資料不會被查詢到</li>
<li><a href="https://tw.nowmsg.com/us_zip.asp">美國郵遞區號查詢</a></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>第一篇看的教學文，資料有點舊了，填寫地址的欄位有點不太一樣，但還是列出給大家參考<br><a href="https://www.wfublog.com/2019/04/google-domains-tw-purchase-transfer-godaddy-dns.html">Google Domains 台灣可以使用了﹍購買 + 轉移網域(Godaddy) + DNS 設定心得</a></p>
]]></content>
      <categories>
        <category>架站</category>
      </categories>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - Hexo 8 個人部落格架設</title>
    <url>/hexo-blog-hosting/</url>
    <content><![CDATA[<p><img src="/../images/hexo_github.png" alt="hexo_github"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身為一個工程師，平時總是需要不斷的更新自己的現有知識避免再度踩到類似的坑<br>寫筆記應該算是人人都會做的事，然而每次當要講解給別人聽時才發現其實我們常常太過簡化一個知識的架構，導致最後其實只是寫給自己當備忘錄而已<br>而這時候練習寫部落格就是一件很有幫助的事了</p>
<span id="more"></span>

<h2 id="Hexo介紹"><a href="#Hexo介紹" class="headerlink" title="Hexo介紹"></a>Hexo介紹</h2><p>靜態部落格產生器</p>
<h2 id="開始架站"><a href="#開始架站" class="headerlink" title="開始架站"></a>開始架站</h2><ol>
<li>在Github新增一個新的repo，如果將來</li>
<li>到Setting</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - RSS</title>
    <url>/hexo-rss-feed/</url>
    <content><![CDATA[<p><img src="/hexo-rss-feed/rss.png"></p>
<h2 id="What’s-RSS"><a href="#What’s-RSS" class="headerlink" title="What’s RSS"></a>What’s RSS</h2><p>RSS的英文全稱是Really Simple Syndication<br>簡單來說，就是可以將網頁內容抽取出來變成一份xml檔，讓使用者透過RSS Feed的功能並配合RSS閱讀器，就可以直接在同一個地方，訂閱和閱讀自己有興趣的所有消息來源。</p>
<span id="more"></span>

<h2 id="Why-RSS"><a href="#Why-RSS" class="headerlink" title="Why RSS"></a>Why RSS</h2><p>RSS是每個傳統部落格必備的功能，以前時常可以在網站上看到一個很像wifi的圖示出現在某個角落<br>透過這個功能，大家可以像現實中收報紙一般，不用特地打開網站也能知道你所喜愛的作者有發布新的內容</p>
<p>以往我們獲取知識和消息常常常常需要在不同平台切換<br>像是Medium、網頁or部落格、電視新聞、FB粉專、Twitter…等</p>
<p>在以前網路剛開始時可能覺得還好，可是當資訊大爆炸的時代開始，RSS又開始流行了起來<br>這次大家不只是把它拿來當作單純的訂閱工具，同時也是從被動閱讀轉換為主動閱讀的必備良藥</p>
<h3 id="被動閱讀"><a href="#被動閱讀" class="headerlink" title="被動閱讀"></a>被動閱讀</h3><p>在現今科技蓬勃發展下，AI和演算法操控著我們絕大部分網路世界的內容來源<br>因此我們只會不斷看到以下幾種內容</p>
<ul>
<li>聳動、血腥、八卦的</li>
<li>演算法根據以往內容判斷我們應該會喜歡的</li>
<li>廣告公司希望我們看到的</li>
</ul>
<h3 id="主動閱讀"><a href="#主動閱讀" class="headerlink" title="主動閱讀"></a>主動閱讀</h3><p>主動閱讀意味者我們必須挺身對抗這一切，重新找回自主權<br>以往我們想獲取知識時可能會選擇自己挑選對應的書籍<br>但在現今，我們可能需要去挑選的是<br>=&gt; 合適的媒體來源</p>
<p>不管是Youtuber、新聞頻道、個人部落格、內容發布平台都好</p>
<p>主動去建立自己的媒體來源吧</p>
<h2 id="RSS-reader"><a href="#RSS-reader" class="headerlink" title="RSS reader"></a>RSS reader</h2><p>平時最常拿來閱讀的裝置大概就是手機或Ipad了<br>目前看到有名的有Feedly和Inoreader，版面和操作上個人比較喜歡用Inoreader。</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>安裝<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>在 Hexo 目錄下的 _config.yml 文件中加入以下代碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RSS</span><br><span class="line"># https://github.com/hexojs/hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &#x27; &#x27;</span><br><span class="line">  order_by: -date</span><br><span class="line">  icon: icon.png</span><br><span class="line">  autodiscovery:true</span><br><span class="line">  template:</span><br></pre></td></tr></table></figure>

<!--more-->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - Sitemap設定</title>
    <url>/hexo-sitemap-setup/</url>
    <content><![CDATA[<p><img src="/hexo-sitemap-setup/sitemap.png" alt="sitemap"></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>安裝自動產生sitemap的套件<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設定根目錄下的_config.yml，自己是習慣把新的設定加在設定檔最後面(注意縮排!)</li>
</ol>
<span id="more"></span>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sitemap</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">./sitemap_template.xml</span> <span class="comment"># 這行非必填，除非你想設定自訂的樣板</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新發布，產生新內容，<br>檢查/public下有沒有正確產生sitemap.xml。</li>
</ol>
<h2 id="Google-Search-Console設定"><a href="#Google-Search-Console設定" class="headerlink" title="Google Search Console設定"></a>Google Search Console設定</h2><p>在一開始進入 Google Search Console 之前必須先設定驗證自己的網站</p>
<p><img src="/hexo-sitemap-setup/sitemap-1.png" alt="sitemap-1"></p>
<h3 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h3><p>根據ithome的<a href="https://ithelp.ithome.com.tw/articles/10249885">文章</a>範例是建議使用網址前置字元做驗證。<br>不過在查教學文章前我就先使用網域的驗證方式成功了! :good<br>個人是覺得比教學簡單很多，只要輸入完網域後就會自動驗證成功。<br>特別標註為新功能，可能就是代表會比舊方法好用吧?</p>
<p><img src="/hexo-sitemap-setup/sitemap-2.png" alt="sitemap-2"></p>
<h3 id="填寫sitemap位置"><a href="#填寫sitemap位置" class="headerlink" title="填寫sitemap位置"></a>填寫sitemap位置</h3><p>首先先點選側邊欄中的Sitemap<br><img src="/hexo-sitemap-setup/sitemap-3.png"></p>
<p><img src="/hexo-sitemap-setup/sitemap-4.png"></p>
<p>如果成功提交後就會將結果顯示在已提交的Sitemap中</p>
<h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><ul>
<li>如果填寫sitemap位置失敗，記得檢查是否有填入完整網址(像是我一開始就是忘了填`https://)  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&lt;yoursite_domain&gt;/sitemap.xml</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>提交成功，但是顯示狀態錯誤</li>
</ul>
<p><img src="/hexo-sitemap-setup/sitemap-err.png" alt="sitemap-err"></p>
<p><img src="/hexo-sitemap-setup/sitemap-err-1.png" alt="sitemap-err-1"></p>
<p>在提交後有，若出現這個錯誤：「可讀取 Sitemap，但其中含有錯誤」，表示 sitemap 裡面的網址跟當初在 Google Search Console 註冊的網址有所差異。</p>
<p>自己目前為止遇到過兩次:</p>
<ol>
<li>從github page網址改為自訂網域</li>
<li>更換自訂網域</li>
</ol>
<p>當網域名稱一更換，當初sitemap中舊文章網址連結就會找不到對應內容，必須回到_config.yml 更新 URL，才能跟sitemap填寫的網址匹配<br>記得重新deploy後要回來Google domain重新提交<br>本來deploy後是想說慢慢等他錯誤應該就會消失，但後來想說重新提交看看好了，結果馬上狀態就成功了</p>
<ul>
<li>deploy完，sitemap.xml 找不到頁面<br>這篇文章有非常完整的解決方案，我自己是沒有遇到<br>如果有遇到的朋友可以參考看看<br><a href="https://blog.kyomind.tw/adding-sitemap-issue/">解決 Hexo + Github Pages 新增 sitemap.xml 找不到頁面</a></li>
</ul>
<hr>
<p>Refference</p>
<p><a href="https://askie.today/upload-sitemap-google-search-console-seo-hexo-blog/">輕鬆地提交 Hexo 部落格的 Sitemap.xml 到 Google Search Console</a><br><a href="https://ithelp.ithome.com.tw/articles/10249885">(24) 試著學 Hexo - SEO 篇 - Google Search Console</a><br><a href="https://jenifers001d.github.io/2019/12/09/SEO/SEO1-Website-is-Not-Showing-in-Google-Search/">SEO 優化 (一)：為什麼搜尋 (Google) 不到我的 Hexo 部落格？</a><br><a href="https://ycjhuo.gitlab.io/blogs/The-first-step-of-SEO-how-to-tell-Google-the-way-to-find-your-website.html#%E6%8F%90%E4%BA%A4-sitemap-%E5%BE%8C-%E5%8F%AF%E8%83%BD%E7%94%A2%E7%94%9F%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF">參考連結</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - 入門</title>
    <url>/hexo-basic/</url>
    <content><![CDATA[<p><img src="/../images/hexo_github.png" alt="hexo_github"></p>
<h2 id="What’s-hexo"><a href="#What’s-hexo" class="headerlink" title="What’s hexo"></a>What’s hexo</h2><p>一種靜態網站產生器。</p>
<p>讓你可以用工程師最常用的md檔案產生網頁，建立自己的部落格</p>
<p>除了發布內容外，也有非常豐富的背景主題還實用套件讓開發者直接套用</p>
<p>如留言系統、訪客人數、RSS等</p>
<span id="more"></span>

<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>當你想要建立自己的部落格和網站時，總不可能只想給自己一個人孤芳自賞看辛酸的</p>
<p>因此怎麼選擇網域和部署方式絕對是分不開的問題</p>
<p>個人目前使用的方案是Github page搭配Netlify部署</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>dependencies</p>
<ul>
<li>Nodejs</li>
<li>hexo</li>
<li>Git</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">// 確定是否正確啟動</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;project_name&gt;  //初始化新的 Hexo，會在當前路徑建立 project_name的資料夾</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> &lt;project_name&gt;</span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="專案結構"><a href="#專案結構" class="headerlink" title="專案結構"></a>專案結構</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>scaffolds<br>鷹架資料夾。當您建立新文章時，Hexo 會根據 scaffold 來建立檔案。</li>
<li>source<br>原始檔案資料夾是放置內容的地方。  檔案 / 資料夾名稱開頭為 _ (底線) 和隱藏檔案會被忽略，除了 _posts 資料夾以外。Markdown 和 HTML 檔案會被處理並放到 public 資料夾，而其他檔案會被拷貝過去。</li>
<li>themes<br>主題 資料夾。Hexo 會根據主題來產生靜態檔案。</li>
<li>package.json<br>Hexo 所需的套件資料</li>
<li>_config.yml<br>設定專案的大部分配置，可以參考 Hexo 官網上的文件說明</li>
</ul>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p><a href="https://hexo.io/zh-tw/docs/writing.html">hexo寫作</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo new [layout] &lt;文章標題&gt;</span></span><br><span class="line">hexo new post <span class="string">&quot;我的第一篇文章 By Hexo&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line">hexo new draft <span class="string">&quot;測試草稿&quot;</span></span><br><span class="line">hexo publish draft <span class="string">&quot;測試草稿&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># local server on http://localhost:4000/</span></span><br><span class="line">hexo server <span class="comment"># hexo s</span></span><br><span class="line">hexo generate <span class="comment"># hexo g</span></span><br><span class="line">hexo deploy <span class="comment"># hexo d</span></span><br></pre></td></tr></table></figure>

<h3 id="搭配github-page"><a href="#搭配github-page" class="headerlink" title="搭配github page"></a>搭配github page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  //安裝 git 部署套件</span><br></pre></td></tr></table></figure>

<p>複製 github Repository 的連結</p>
<p>_config.yml 設定爲以下調整，官網參考</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Kevinwuu/Kevinwuu.github.io.git <span class="comment"># git@github.com:&lt;github_username&gt;/&lt;github_username&gt;.github.io.git</span></span><br><span class="line">  branch: gh-pages</span><br><span class="line">  message: <span class="string">&#x27;deploy site&#x27;</span></span><br></pre></td></tr></table></figure>

<p>執行以下指令將 Hexo 產生的網站內容上傳到 Github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>也可以將常用指令組合寫進package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo cl &amp;&amp; hexo g -d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;hexo cl &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="自訂-Domain-網域"><a href="#自訂-Domain-網域" class="headerlink" title="自訂 Domain 網域"></a>自訂 Domain 網域</h2><h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p><a href="https://ed521.github.io/2019/07/hexo-install/">[教學] 使用 GitHub Pages + Hexo 來架設個人部落格 | 瑪利歐的部落格 (ed521.github.io)</a></p>
<p><a href="https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#Hexo-%E8%A8%AD%E5%AE%9A">https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#Hexo-設定</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - 加入utterances留言板功能</title>
    <url>/hexo-utterances-comment/</url>
    <content><![CDATA[<p><img src="/../images/hexo_github.png" alt="hexo_github"></p>
<p>基本設定非常快速，因此不多贅述操作流程，單純描述遇到的一些問題以及參考文章</p>
<p>常見的三個留言板第三方套件</p>
<ul>
<li>Disqus</li>
<li>Gitalk</li>
<li>utterances</li>
</ul>
<p>選擇思路可以參考以下連接<br><a href="https://blog.kyomind.tw/hexo-blog-reply/">Hexo 新增 utterances 留言板與方案選擇思路</a></p>
<span id="more"></span>

<p>在<code>安裝與設定流程</code>的部分作者也提到了三篇參考文章，看完一二篇後，個人覺得第一篇就滿直接好懂了<br>其實主要流程也是照著<a href="https://utteranc.es/">utteranc</a>網站上一步一步設定，最後再把script貼到指定的地方而已~</p>
<p>但如果只看教學文章而不是官網的話可能會漏掉幾個基本的注意事項導致設定失敗，看完前兩篇感覺都有漏掉一些東西所以這邊再稍微補充</p>
<ul>
<li>repo必須是public</li>
<li>確保<a href="https://github.com/apps/utterances">utterances app</a>已經被安裝在你的repo下 (只需要開放權限給你需要用的repo就好)</li>
</ul>
<p>在官網的最後一步中<br>要把產生的script檔，放在hexo主題下對應的swig檔<br>結果我看了一下我的theme資料夾後…<br>什麼都沒有啊xDDD</p>
<p><img src="/hexo-utterances-comment/image1.png" alt="image1.png"></p>
<p>印象中之前似乎也遇到類似問題，不確定是因為hexo新版的檔案結構不同還是因為目前使用的主題問題<br>ps:之後確認完會再來修改本文</p>
<p>but最後還是順利找到地方設定了，原來各留言板功能也一併被整合在主題設定的config中<br>在我目前主題的config下 <code>_config.next</code><br>只要填上repo的部分<code>owner/repo</code> 和你想要的設定就行了，預設的comment裡也很貼心地告訴你可以用的option有哪些<br>(option的內容可以參考<a href="https://utteranc.es/">utteranc</a>官網說明)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">Kevinwuu/Kevinwuu.github.io</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>

<h3 id="讓分類與標籤頁沒有留言區"><a href="#讓分類與標籤頁沒有留言區" class="headerlink" title="讓分類與標籤頁沒有留言區"></a>讓分類與標籤頁沒有留言區</h3><p>留言區開關早已納入了 Hexo 內建的語法設定<br>請在頁面所屬的 Markdown 檔案中，加入下列comments: false標籤，以分類頁為例：</p>
<pre><code class="markdown">title: categories
layout: categories
comments: false
---
</code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - 安裝Like Coin 讚賞鍵</title>
    <url>/hexo-integrate-like-coin/</url>
    <content><![CDATA[<p><img src="/../images/hexo_github.png" alt="hexo_github"></p>
<p><a href="https://docs.like.co/v/zh/user-guide/creator/self-host/hexo-next">Like Coin官網教學</a>的內容引用自<a href="https://blog.typeart.cc/">只是個打字的</a> 的教學文章，講解的已經滿清楚</p>
<p>But!<br>之前在許多文章都提過，HEXO NEXT 版本6 → 8之後就有了滿大的改動，許多常用的套件設定都已經整合進config中<br>因此很多網路上看到的教學文章採用的設定方法已經不太適用</p>
<span id="more"></span>

<p><a href="https://blog.typeart.cc/%E5%9C%A8Hexo%20NexT%E5%A2%9E%E5%8A%A0like%20Button/">安裝教學(old)</a></p>
<p><a href="https://blog.typeart.cc/upgrade-nexo-next-6-to-8-and-integrate-adsense-like-button/">安裝教學(new)</a></p>
<p>But!<br>新版教學文章雖然標題有寫到Like Coin如何引入，但內文可以說幾乎一行都沒提到XD<br>但他有提到了一個新的重點就是，新版NEXT主題提供了<a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html">custom files</a>的寫法，讓你可以把以前很多侵入式的script寫法拉出來管理</p>
<p>詳細設定可以在<code>_config.next.yml</code>中找到，照著comment新增對應的資料夾和檔案即可<br>一般看到的Like Coin大多都放在文章結尾的下方，因此footer或postBodyEnd都可以使用看看</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment"># postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>footer : 會放在外面<br><img src="/hexo-integrate-like-coin/image_footer.png" alt="image_footer"></p>
<p>postBodyEnd : 跟文章的背景一樣是灰色的<br><img src="/hexo-integrate-like-coin/image_post.png" alt="image_post"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - 文章標題使用特殊字元</title>
    <url>/hexo-special-symbol-in-title/</url>
    <content><![CDATA[<p><img src="/../images/hexo_github.png" alt="hexo_github"></p>
<h2 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h2><p>若在文章標題中使用特殊符號時 (例如：[] 中括號)，會出現錯誤訊息<br>主要是跟yml的格式有關，因此修改檔案或資料夾名稱不會有問題<br>但在<code>hexo new post</code>或是修改舊文章標題後<code>hexo s</code>都會跳錯<br><code>err: YAMLException: bad indentation of a mapping entry</code></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: YAMLException: bad indentation of a mapping entry (1:20)</span><br><span class="line"></span><br><span class="line">   1 | title: [Hexo架站懶人包] - 文章標題使用特殊字元</span><br><span class="line">  ------------------------^</span><br><span class="line">   2 | date: 2022-06-12 16:03:00</span><br><span class="line">   3 | categories:</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">     </span><br><span class="line">    reason: &#x27;bad indentation of a mapping entry&#x27;,</span><br><span class="line">    mark: &#123;</span><br><span class="line">      name: null,</span><br><span class="line">      buffer: &#x27;title: [Hexo架站懶人包] - 文章標題使用特殊字元\n&#x27; +</span><br><span class="line">        &#x27;date: 2022-06-12 16:03:00\n&#x27; +</span><br><span class="line">        &#x27;categories: \n&#x27; +</span><br><span class="line">        &#x27;tags: \n&#x27;,</span><br><span class="line">      position: 19,</span><br><span class="line">      line: 0,</span><br><span class="line">      column: 19,</span><br><span class="line">      snippet: &#x27; 1 | title: [Hexo架站懶人包] - 文章標題使用特殊字元\n&#x27; +</span><br><span class="line">        &#x27;------------------------^\n&#x27; +</span><br><span class="line">        &#x27; 2 | date: 2022-06-12 16:03:00\n&#x27; +</span><br><span class="line">        &#x27; 3 | categories: &#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>在建立文章後再去修改文章標題<br>將標題以單引號 <code>&#39;&#39;</code> 或雙引號 <code>&quot;&quot;</code> 包裹起來</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">title: &quot;[Hexo架站懶人包] - 文章標題使用特殊字元&quot;</span><br></pre></td></tr></table></figure>

<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>此解法只能先用一般字元建立文章後再去修改，對於new post指令無效</p>
<p>自己曾試過將指令中的雙引號改為單引號看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&#x27;[Hexo架站懶人包] - 文章標題使用特殊字元&#x27;</span></span><br></pre></td></tr></table></figure>

<p>雖然可以順利建立，但由於parsing問題標題會被截斷<br>只剩下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文章標題使用特殊字元&#x27;</span><br></pre></td></tr></table></figure>
<p>而且也沒創建對應的assest資料夾</p>
<p>ps: 每次都需要重新命名畢竟還是有點麻煩，還在尋找其他方法中</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://carolchyang.github.io/2021/04/10/hexo-title-error/">在 Hexo 文章標題使用特殊字元的技巧</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo架站懶人包] - 更換背景</title>
    <url>/hexo-change-bg/</url>
    <content><![CDATA[<p><img src="/../images/hexo-only.jpg" alt="hexo"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>內容很簡單而且別人文章已經寫得滿詳細，幾乎可以直接照他步驟就行</p>
<p>雖然我自己剛好也同樣是用這個最熱門的NEXT主題，但根據之前經驗我的檔案架構跟網路上教學文有點不太一樣所以還是稍微紀錄一下</p>
<span id="more"></span>

<p><strong>參考文:</strong><br><a href="https://heidiliu2020.github.io/hexo-theme/">【學習筆記】如何更換 Hexo 主題 &amp; 自訂樣式</a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>自己懶人包紀錄一下基本步驟還有差別</p>
<p>使用的主題和hexo版本:<br><code>&quot;hexo&quot;: &quot;^5.0.0&quot;</code><br><code>hexo-theme-next&quot;: &quot;^8.6.1&quot;</code></p>
<h3 id="主題config中打開自訂style設定"><a href="#主題config中打開自訂style設定" class="headerlink" title="主題config中打開自訂style設定"></a>主題config中打開自訂style設定</h3><p>文章中<code>修改/themes/next/_config.yml</code> 檔案，把<code>custom_file_path</code>底下style部分的註解打開<br>⇒我自己這邊是直接去改根目錄下的<code>_config.next.yml</code></p>
<p><img src="/../images/%E4%BF%AE%E6%94%B9hexo%E8%83%8C%E6%99%AF/img.png"></p>
<p><img src="/../images/%E4%BF%AE%E6%94%B9hexo%E8%83%8C%E6%99%AF/img1.png"></p>
<h3 id="新增styles-styl設定自訂樣式"><a href="#新增styles-styl設定自訂樣式" class="headerlink" title="新增styles.styl設定自訂樣式"></a>新增<code>styles.styl</code>設定自訂樣式</h3><p>根據上一步驟內容需要在source/_data資料夾中放入檔案</p>
<p>_data印象中一開始似乎沒有所以需要自己手動建立一下</p>
<p>文章裡的code行尾還有加上分號和註解，直接複製來用會編議失敗</p>
<p>拿掉後只保留css code的部分就ok了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background: url(/images/bg.jpg)</span><br><span class="line">  background-repeat: no-repeat</span><br><span class="line">  background-attachment:fixed</span><br><span class="line">  background-size: cover</span><br><span class="line">  background-position:50% 50%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後記得也要把圖片放到對應位置 /source/images/bg.jpg 就可以套用成功了</p>
<p>成果如下:</p>
<p><img src="/../images/%E4%BF%AE%E6%94%B9hexo%E8%83%8C%E6%99%AF/img2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mapbox hover顯示popup問題</title>
    <url>/mapbox-hover-popup-issue/</url>
    <content><![CDATA[<p><img src="/mapbox-hover-popup-issue/mapboxgl.png" alt="Mapbox GL"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>通常 mapbox 相關範例都是 click 某個點來顯示 popup，不過實際上也很常會需要在 hover 時顯示，同時 popup 上可能會有一些資訊可以點選</p>
<p>但是如果你設定 mousein 開啟,mouseleave 關閉 popup，那麼在你移動到 popup 前就會因為離開 popup 而觸發關閉</p>
<span id="more"></span>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>原先以為只是因為cluster本身跟popup中間有空隙導致觸發mouseout才發生<br>但其實這個問題有兩個原因造成</p>
<ul>
<li>離開 popup</li>
<li>離開 map</li>
</ul>
<p>mouseleave 不像原本所想的，是離開 layer 才觸發<br>而是離開特定 layer 或離開 map 都會觸發<br>由於 mapbox 的 popup 不像其他元件會畫在 canvas 中，而是畫在 map 外所以當滑鼠移動到popup上時也會判斷為離開 map。<br>看了看一些網路的文章後，有很多遇到跟我一樣問題的人，但都沒有看到有用的解法，所以最後決定自己實作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onMapLoad = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!mapRef.current) <span class="keyword">return</span>;</span><br><span class="line"> <span class="keyword">const</span> map = mapRef.current;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Add custom mouse event for cluster and popup</span></span><br><span class="line"><span class="comment">  * to avoid popup close when mouse moved on popup.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">let</span> isOnCluster = <span class="literal">false</span>;</span><br><span class="line"> map.on(<span class="string">&quot;mousemove&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> features = map.queryRenderedFeatures(e.point, &#123;</span><br><span class="line">     <span class="attr">layers</span>: [<span class="string">&quot;cluster-layer&quot;</span>, <span class="string">&quot;point-status-layer&quot;</span>],</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (isOnCluster) &#123;</span><br><span class="line">     <span class="comment">// mouseleave cluster or point</span></span><br><span class="line">     <span class="keyword">if</span> (!features.length) &#123;</span><br><span class="line">       isOnCluster = <span class="literal">false</span>;</span><br><span class="line">       map.getCanvas().style.cursor = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       setPopupInfo(<span class="literal">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (features.length) &#123;</span><br><span class="line">     <span class="comment">// mouseenter cluster or point</span></span><br><span class="line">     isOnCluster = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p>一樣問題描述的文章<br><a href="https://github.com/mapbox/mapbox-gl-js/issues/11491">Popup can stay when mouse goes to popup area from hovered point</a></p>
<p><a href="https://stackoverflow.com/questions/69866651/mapbox-add-popup-on-hover-layer-close-on-mouseleave-but-keep-open-on-popup-h">Mapbox add popup on hover (layer), close on mouseleave, but keep open on popup hover</a></p>
<p><a href="https://www.notion.so/kevinwuuisme/Mapbox-GL-11edb60b7b054b4b85d278e44fb5ec0c#ee46847751d744b3b89894ed73f0d83f">https://www.notion.so/kevinwuuisme/Mapbox-GL-11edb60b7b054b4b85d278e44fb5ec0c#ee46847751d744b3b89894ed73f0d83f</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>mapbox</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nginx在docker中host靜態網頁</title>
    <url>/host-html-in-docker-with-nginx/</url>
    <content><![CDATA[<p><img src="/host-html-in-docker-with-nginx/nginx-hosting.png" alt="nginx-hosting"></p>
<p>前陣子在公司新專案中引入了icon font，主要是為了讓單色icon圖檔的引用更加方便<br>由於平時只會把相關的style檔放在專案裡使用，偶爾想查找icon的class name時，就只能自己打開當初那包下載下來的zip去看demo.html有點不太方便</p>
<span id="more"></span>

<p>如果有其他人也更新了icon font，那每次就只能再跟他要最新的icfont.zip來看<br>但前提是要先去問有沒有人更新過，實在是有點麻煩</p>
<p>印象中在先前的專案，是直接在內部某台server裡開一個port來host，所以這次想自己試看看</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>通常為了避免汙染server環境，不同的服務我們都會習慣建立不同的docker去跑</p>
<p>Google直接搜尋”host html in docker with nginx”<br>第一篇文章就寫的滿簡單好懂了，但還是在這邊簡單用中文做個紀錄分享</p>
<h3 id="Step-1-建立資料夾-amp-放入html檔"><a href="#Step-1-建立資料夾-amp-放入html檔" class="headerlink" title="Step 1 - 建立資料夾 &amp; 放入html檔"></a>Step 1 - 建立資料夾 &amp; 放入html檔</h3><p>一般來說可以只放入一個index.html即可<br>但由於icfont下的demo.html需要依賴其他檔案，所以我選擇整包解壓縮後放入</p>
<p><img src="/host-html-in-docker-with-nginx/structure.png" alt="structure"></p>
<h3 id="Step-2-建立Dockerfile"><a href="#Step-2-建立Dockerfile" class="headerlink" title="Step 2 - 建立Dockerfile"></a>Step 2 - 建立Dockerfile</h3><p>現在host server幾乎都是使用nginx了，但如果要使用Apache下方也有提供對應指令</p>
<p>第一行會指定要用的nginx image版本為alpine<br>第二行會將當前目錄的所有檔案放進<code>/usr/share/nginx/html</code></p>
<p>(確保你建立的Dockerfile跟html位於同個目錄下，否則以下範例指令需要自行修改)</p>
<p><strong>Use Nginx Web server</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>

<p><strong>Use Apache Web server</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apache</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /var/www/html</span></span><br></pre></td></tr></table></figure>

<h3 id="Step-3-build-docker-image"><a href="#Step-3-build-docker-image" class="headerlink" title="Step 3 - build docker image"></a>Step 3 - build docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t html-server-image:v1 .</span><br></pre></td></tr></table></figure>

<p>可以使用<code>docker images</code>檢查剛剛指定的html-server-image是否成功被建立<br>也可以自行換成別的image name</p>
<p><img src="/host-html-in-docker-with-nginx/image-good.png" alt="image-good"></p>
<h3 id="Step-4-Run-the-Docker-Container"><a href="#Step-4-Run-the-Docker-Container" class="headerlink" title="Step 4 - Run the Docker Container"></a>Step 4 - Run the Docker Container</h3><p>這邊docker的外部port對應不使用80改用5555，避免檔到其他服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5555:80 html-server-image:v1</span><br></pre></td></tr></table></figure>

<h3 id="Step-5-Test-the-Port"><a href="#Step-5-Test-the-Port" class="headerlink" title="Step 5 - Test the Port"></a>Step 5 - Test the Port</h3><p>可以下curl檢查是否返回正確的html，或是直接去localhost:5555看<br>如果當初你放入的是index.html，那你應該會看到對應的內容出現<br>不過因為icfont下載完後的網頁檔是demo.html，因此在port 5555會看到的是nginx預設的html內容<br>要記得到localhost:5555/demo.html才會顯示icon font的網頁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:5555</span><br></pre></td></tr></table></figure>

<p><img src="/host-html-in-docker-with-nginx/curl-host.png" alt="curl-host"></p>
<p><img src="/host-html-in-docker-with-nginx/nginx-good.png" alt="nginx-success"></p>
<h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p><a href="https://www.dailysmarty.com/posts/steps-for-deploying-a-static-html-site-with-docker-and-nginx">Steps for Deploying a Static HTML Site with Docker and Nginx</a></p>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前端string計算width</title>
    <url>/frontend-calculate-string-width/</url>
    <content><![CDATA[<p><img src="/frontend-calculate-string-width/debug.png" alt="debug"></p>
<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>工作上遇過兩次不同的情況，一樣都是需要判斷字串是否overflow<br>但依據狀況的不同，適合使用的解法也會有所不同</p>
<span id="more"></span>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>網路上有提供了不只一種方法，根據不同情況</p>
<ol>
<li>判斷table中字串是否overflow，如有overflow hover時才要顯示tooltip，反之則不用<br>Only show ReactTooltip when text overflow</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkOverflow = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> isOverflow = <span class="literal">false</span>;</span><br><span class="line">	isOverflow = e.offsetHeight &lt; e.scrollHeight || e.offsetWidth &lt; e.scrollWidth;</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判斷table中tag欄位內容是否overflow，如果確認過長則在結尾多顯示一個 <code>...</code> tag，hover後顯示剩餘項目的tooltip</li>
</ol>
<p>印象中網路上提供了不只一種方式，這次是使用convas</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> font = <span class="string">&#x27;13px Roboto&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">context.font = font;</span><br><span class="line"><span class="keyword">const</span> &#123; width &#125; = context.measureText(inputText);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p><a href="https://stackoverflow.com/questions/42012130/how-to-detect-overflow-of-react-component-without-reactdom">How to detect overflow of React component without ReactDOM?</a></p>
<p>平常使用的tooltip套件，看起來沒有提供相關的method<br><a href="https://github.com/wwayne/react-tooltip">react-tooltip</a></p>
<p><a href="https://www.npmtrends.com/react-ellipsis-text-vs-react-ellipsis-with-tooltip-vs-react-lines-ellipsis-vs-react-text-truncate-vs-react-truncate-vs-react-truncate-string">相關的truncate套件</a></p>
<p>最接近想要的效果，但要多包一層element可能會影響排版<br><a href="https://github.com/amirfefer/react-ellipsis-with-tooltip">react-ellipsis-with-tooltip</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vercel上部署Express實作JWT應用</title>
    <url>/express-app-implement-jwt-on-vercel/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要希望可以實作看看，前後端在派發和驗證jwt的流程和語法</p>
<p>所以主要只有依照參考文章內容去實作功能而已</p>
<p><a href="https://ken00535.medium.com/%E4%BD%BF%E7%94%A8-jwt-%E4%BE%86%E9%A9%97%E8%AD%89%E8%AB%8B%E6%B1%82%E8%80%85%E8%BA%AB%E5%88%86-285c74f4dc5c">使用 JWT 來驗證請求者身分</a></p>
<p>上述文章有提供程式碼連結可以自行參考:<br><a href="https://github.com/ken00535/nodejs-medium-example/tree/master/jwt">link</a></p>
<p>差別在我是直接用express generator產生專案後再去修改，所以可能需要做些小調整</p>
<span id="more"></span>

<p>ps:<br>一開始下cli忘了設定模板會使用jade引擎，個人覺得ejs比較容易上手一些，所以後續又手動修改配置為ejs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">express myExpressApp -e --ejs</span><br></pre></td></tr></table></figure>

<h2 id="移除產生器的多餘內容"><a href="#移除產生器的多餘內容" class="headerlink" title="移除產生器的多餘內容"></a>移除產生器的多餘內容</h2><ul>
<li>拿掉users相關route</li>
<li>render error內容可移除</li>
</ul>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><ul>
<li><p><strong>local跑的時候發生cors</strong></p>
<p>  跑起來的url是用localhost，教學文章裡打api是用127.0.0.1</p>
<p>  兩邊改成統一就好了</p>
</li>
<li><p><strong>vercel上打API沒反應</strong></p>
<p>  實際部署完後API路徑就應該要改成正式url而不是localhost不然會找不到，需要想個方法可以動態改變打API時的路徑</p>
<p>  本來打算透過.env判斷現在環境來塞進不同的值，或是把寫死的地方改為使用window.location.href之類</p>
<p>  後來發現vercel上加入環境變數後，再透過process.env帶入感覺比較簡單</p>
</li>
<li><p><strong>css/main.css拿不到</strong></p>
<p>  express assest路徑會去抓public資料夾底下，裡面內建已經有幾個像是stylesheet,images,javascripts等空資料夾<br>把stylesheet改成css後再將檔案放入就行了</p>
</li>
<li><p><strong>部署到vercel後發現畫面是404</strong></p>
<p>  <img src="/../images/%E5%9C%A8Vercel%E4%B8%8A%E9%83%A8%E7%BD%B2Express%E5%AF%A6%E4%BD%9CJWT%E6%87%89%E7%94%A8/404.png"></p>
<p>  需要加上<code>vercel.json</code></p>
</li>
</ul>
<pre><code>![](../images/在Vercel上部署Express實作JWT應用/code.png)
</code></pre>
<h2 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h2><p><a href="https://israynotarray.com/nodejs/20230425/1940966356/">Express 部署到 Vercel</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
</search>
